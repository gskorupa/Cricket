plugins {
    id 'java'
    id 'maven-publish'
}

java {
    sourceCompatibility = JavaVersion.VERSION_13
    targetCompatibility = JavaVersion.VERSION_13
}

version = "1.5.37"

repositories {
    mavenCentral()
    //maven {
    //        name = "GitHubPackages"
    //        url = uri("https://maven.pkg.github.com/gskorupa/test")
    //        credentials {
    //            username = 'gskorupa'
    //            password = '13edaba307f7b164c62fdc008afc5ca360b6796a' 
    //        }
    //    }
    flatDir {
        dirs 'local-lib'
    }
}

dependencies {
    implementation \
    'com.cedarsoftware:json-io:4.12.0',\
    'org.apache.commons:commons-csv:1.8',\
    'com.h2database:h2:1.4.200',\
    'com.sun.mail:javax.mail:1.6.2',\
    'com.sun.activation:javax.activation:1.2.0',\
    'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0',\
    'org.wso2.orbit.javax.xml.bind:jaxb-api:2.3.1.wso2v1',\
    'org.postgresql:postgresql:42.2.14.jre7',\
    'LivingDocumentation:LivingDocumentation:1.0.0',\
    'org.slf4j:slf4j-api:1.7.30', \
    'ch.qos.logback:logback-classic:1.2.3',\
    'ch.qos.logback:logback-core:1.2.3'
    runtimeOnly \
    'com.cedarsoftware:json-io:4.12.0',\
    'org.apache.commons:commons-csv:1.8',\
    'com.h2database:h2:1.4.200',\
    'com.sun.mail:javax.mail:1.6.2',\
    'com.sun.activation:javax.activation:1.2.0',\
    'org.wso2.orbit.javax.xml.bind:jaxb-api:2.3.1.wso2v1',\
    'LivingDocumentation:LivingDocumentation:1.0.0',
    'org.slf4j:slf4j-api:1.7.30', \
    'ch.qos.logback:logback-classic:1.2.3',\
    'ch.qos.logback:logback-core:1.2.3'
    testImplementation 'junit:junit:4.13'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'org.cricketmsf.Runner'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
 }
 
task fatJarAll(type: Jar) {
    dependsOn 'setVersion'
    dependsOn 'setBuildVersion'
    archiveClassifier = 'all'
    from sourceSets.main.output
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) } } {
        exclude 'META-INF/*', 'META-INF/hk2-locator/**', 'META-INF/licenses/**', \
        'META-INF/maven/**', 'META-INF/services/**', 'META-INF/versions/**', 'META-INF/org/**',\
        'pmd/**', 'checkstyle/**', 'findbugs/**', 'bundle.properties'
    }
    
    manifest {
        attributes 'Main-Class': 'org.cricketmsf.Runner'
    }
}

task fatJar(type: Jar) {
    dependsOn 'setVersion'
    dependsOn 'setBuildVersion'
    archiveClassifier = ''

    from sourceSets.main.output

    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) } } {
        exclude 'META-INF/*', 'META-INF/hk2-locator/**', 'META-INF/licenses/**', \
        'META-INF/maven/**', 'META-INF/services/**', 'META-INF/versions/**', 'META-INF/org/**',\
        '**/postgresql/**', '**/eclipse/**', 'pmd/**', 'checkstyle/**', 'findbugs/**', 'bundle.properties'
    }
    
    manifest {
        attributes 'Main-Class': 'org.cricketmsf.Runner'
    }
}

task setVersion(type: WriteProperties) {
    outputFile = file('src/main/resources/cricket.properties')
    property('version', version)
    
}
task setBuildVersion(type: WriteProperties) {
    outputFile = file('build/resources/main/cricket.properties')
    property('version', version)
    
}

task prepareLatest(type: Copy) {
    from fatJar
    rename { String filename ->
         return "cricket.jar"
    }
    into "build/dist"
}

task zipDistro(type: Zip) {
    dependsOn "fatJar"
    archiveFileName = "cricket.zip"
    destinationDirectory = file("$buildDir/dist")
    from fatJar
}

build.finalizedBy(fatJar)

//publishing {
//    repositories {
//        maven {
//            name = "CricketPackages"
//            url = uri("https://maven.pkg.github.com/gskorupa/cricket")
//            credentials {
//                username = githubUser
//                password = githubPublishingToken
//            }
//        }
//    }
//    publications {
//        maven(MavenPublication) {
//            groupId = 'org.cricketmsf'
//            artifactId = 'cricket'
//            artifact fatJar
//        }
//    }
//}

