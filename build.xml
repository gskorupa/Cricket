<?xml version="1.0" encoding="UTF-8"?>
<project name="Cricket" default="all" basedir="."
>
    <description>Builds, tests, and runs the project Cricket.</description>
    <target name="all" depends="dist">
        <!-- TODO define script. See Help menu or http://ant.apache.org/ -->
    </target>
    <!-- set global properties for this build -->
    <property name="targetJava10+" value="true"/>
    <property name="mainVersion" value="1.3.20"/>
    <property name="version" value="${mainVersion}"/>
    <!-- default JDK == 1.12 -->
    <!-- alternate JDK compiler will be used if declared (not empty) -->
    <!--<property name="alternateJDK" value="/usr/lib/jvm/java-8-oracle"/>-->
    
    <!--
    <condition property="version" value="${mainVersion}">
        <equals arg1="${targetJava10+}" arg2="true"/>
    </condition>
    <condition property="version" value="${mainVersion}_8">
        <equals arg1="${targetJava10+}" arg2="false"/>
    </condition>
    -->
    <condition property="targetJava8" value="true">
        <equals arg1="${targetJava10+}" arg2="false"/>
    </condition>
    <property name="src" location="src/java"/>
    <property name="src-other" location="src/other"/>
    <property name="tests" location="test"/>
    <property name="build" location="build/classes"/>
    <property name="build.test" location="build/test"/>
    <property name="reports" location="reports"/>
    <property name="dist" location="dist"/>
    <property name="web" location="web"/>
    <property name="lib" location="lib"/>
    <property name="jar-name" value="cricket-${version}.jar"/>
    
    <!-- define parameters used by repositories -->
    <property name="groupId" value="org.cricketmsf" />
    <property name="artifactId" value="cricket" />
    <property name="docker-repository" value="gskorupa" />
    <property name="jar" value="${dist}/${artifactId}-${version}.jar" />
    <property name="javadoc-jar" value="${dist}/${artifactId}-${version}-javadoc.jar" />
    <property name="sources-jar" value="${dist}/${artifactId}-${version}-sources.jar" />
    
    <!-- external libraries used by Cricket-->
    <!-- REMEMBER to download these libraries before building Cricket -->
    <property name="json-io-lib" value="json-io-4.11.1.jar"/>
    <property name="commons-csv-lib" value="commons-csv-1.5.jar"/>
    <property name="h2-lib" value="h2-1.4.200.jar"/>
    <property name="jaxb-lib" value="jaxb-api-2.3.1.jar"/>
    <property name="javamail-lib" value="javax.mail-1.6.2.jar"/>
    <property name="activation-lib" value="javax.activation-1.2.0.jar"/>
    <property name="mqtt-lib" value="org.eclipse.paho.client.mqttv3-1.2.0.jar"/>
    <property name="livingdocumentation-lib" value="LivingDocumentation.jar"/>
    <property name="jetty-all-lib" value="jetty-all.jar"/>
    
    <path id="project-classpath">
        <pathelement location="${lib}/${json-io-lib}"/>
        <pathelement location="${lib}/${commons-csv-lib}"/>
        <pathelement location="${lib}/${h2-lib}"/>
        <pathelement location="${lib}/${javamail-lib}"/>
        <pathelement location="${lib}/${activation-lib}"/>
        <pathelement location="${lib}/${mqtt-lib}"/>
        <pathelement location="${lib}/${jaxb-lib}"/>
        <pathelement location="${lib}/${livingdocumentation-lib}"/>
        <pathelement location="${lib}/${jetty-all-lib}"/>
    </path>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp>
            <format property="version" pattern="yyyy.MM.dd"/>
        </tstamp>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
        <mkdir dir="${build.test}"/>
        <mkdir dir="${reports}"/>
        <propertyfile file="${src}/cricket.properties">
            <entry  key="version" value="${version}"/>
        </propertyfile>
    </target>
    
    <target name="compile" depends="init,compile8,compile12" description="compile the source">
        <!-- Compile the java code from ${src} into ${build} -->
    </target>
    <target name="compile8" if="alternateJDK">
        <copy file="${src}/BasicService-help.template" tofile="${src}/BasicService-help.txt" overwrite="true"/>
        <replace file="${src}/BasicService-help.txt" token="{{version}}" value="${version}" summary="true"/>
        <javac 
            executable="${alternateJDK}/bin/javac"
            fork="true"
            target="1.8" 
            source="1.8" 
            srcdir="${src}" 
            destdir="${build}"
            includeantruntime="false" 
            debug="on"
            classpathref="project-classpath"
            verbose="false">
            <!--<compilerarg value="-Xlint:unchecked"/>-->
        </javac>
    </target>
    <target name="compile12" unless="alternateJDK">
        <copy file="${src}/BasicService-help.template" tofile="${src}/BasicService-help.txt" overwrite="true"/>
        <replace file="${src}/BasicService-help.txt" token="{{version}}" value="${version}" summary="true"/>
        <javac 
            target="13" 
            source="13" 
            srcdir="${src}" 
            destdir="${build}"
            includeantruntime="false" 
            debug="on"
            verbose="true"
            classpathref="project-classpath">
            <!--<compilerarg value="-Xlint:unchecked"/>-->
        </javac>
    </target>
    
    <target name="doc" depends="init">
        <javadoc packagenames="org.cricketmsf.*"
                 sourcepath="${src}"
                 defaultexcludes="yes"
                 destdir="docs/javadoc"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="Cricket Microservices Framework">
            <doctitle><![CDATA[<h1>Cricket Microservices Framework</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2016, 2017 Grzegorz Skorupa.</i>]]></bottom>
            <tag name="todo" scope="all" description="To do:"/>
            <link offline="true" href="http://docs.oracle.com/javase/8/docs/api/" packagelistLoc="C:\tmp"/>
            <link href="http://docs.oracle.com/javase/8/docs/api/"/>
        </javadoc>
        <jar basedir="docs/javadoc" destfile="${javadoc-jar}" />
    </target>
    
    <target name="documentation" depends="init">
        <javadoc packagenames="org.cricketmsf.*"
                 sourcepath="${src}">
            <classpath>
                <fileset dir="${lib}"/>
            </classpath>
            <doclet name="org.cricketmsf.livingdocumentation.LivingDocDoclet"  path="${lib}/${livingdocumentation-lib}">
                <param name="-category" value="glossary"/>
                <param name="-file" value="${basedir}/docs/documentation/glossary.md"/>
            </doclet>
        </javadoc>
        <javadoc packagenames="org.cricketmsf.*"
                 sourcepath="${src}">
            <classpath>
                <fileset dir="${lib}"/>
            </classpath>
            <doclet name="org.cricketmsf.livingdocumentation.LivingDocDoclet"  path="${lib}/${livingdocumentation-lib}">
                <param name="-category" value="architecture"/>
                <param name="-file" value="${basedir}/docs/documentation/architecture.md"/>
            </doclet>
        </javadoc>
    </target>

    <target name="dist" depends="jar" description="generate the distribution">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}"/>
        <antcall inheritall="true" target="jar"/>
        <mkdir dir="${dist}/config"/>
        <mkdir dir="${dist}/files"/>
        <mkdir dir="${dist}/data"/>
        <mkdir dir="${dist}/log"/>
        <mkdir dir="${dist}/www"/>
        <mkdir dir="${dist}/www/assets"/>
        <delete file="${dist}/data/cricket_publickeystore.jks" failonerror="false"></delete>
        <genkey alias="cricket" 
                keystore="${dist}/data/cricket_publickeystore.jks" 
                storepass="cricket15$#17" 
                keypass="cricket15$#17" 
                keyalg="RSA" 
                keysize="2048" 
                validity="720">
            <dname>
                <param name="CN" value="selfsigned"/>
                <param name="OU" value="Cricket MSF"/>
            </dname>
        </genkey>
        <copy todir="${dist}/www">
            <fileset dir="www"/>
        </copy>
        <echo message="Building distribution package"/>
        <copy todir="${dist}/config" file="${src}/cricket.json"/>
        <copy todir="${dist}" file="${src-other}/build.xml"/>
        <antcall target="copy10run">
            <param name="targetJava10+" value="${targetJava10+}"/>
        </antcall>
        <antcall target="copy8run">
            <param name="targetJava8" value="${targetJava8}"/>
        </antcall>
        <replace file="${dist}/run.sh" token="{{distribution}}" value="${jar-name}" summary="true"/>
        <replace file="Dockerfile" token="{{version}}" value="${version}" summary="true"/>
        <replace file="${dist}/www/admin/components/app_main.tag" token="cricket-version" value="${version}"/>
        <zip basedir="dist" destfile="${artifactId}-microsite.zip"/>
    </target>
    
    <target name="copy10run" if="${targetJava10+}">
        <copy tofile="${dist}/run.sh" file="${src-other}/run.sh"/>
        <copy file="Dockerfile.template" tofile="Dockerfile" overwrite="true"/>
    </target>
    <target name="copy8run" if="${targetJava8}">
        <copy tofile="${dist}/run.sh" file="${src-other}/run_8.sh"/>
        <copy file="Dockerfile_8.template" tofile="Dockerfile" overwrite="true"/>
    </target>
    
    <target name="distribution" depends="dist"
            description="generate the distribution">
        <antcall inheritall="true" target="doc"/>
        <jar basedir="src" destfile="${sources-jar}"/>
        <copy file="${dist}/${jar-name}" tofile="docs/cricket-latest.jar" overwrite="true"/>
    </target>

    <target name="clean" description="clean up">
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
    </target>
    
    <target name="jar" depends="compile">
        <copy todir="${build}" overwrite="true">
            <fileset dir="${src}" includes="*.properties"/>
            <fileset dir="${src}" includes="*.json"/>
            <fileset dir="${src}" includes="*.txt"/>
        </copy>
        <copy todir="${build}/src/java/my/example" file="${src}/org/cricketmsf/services/Microsite.java"/>
        <copy todir="${build}/src/html" file="${src-other}/index.html"/>
        <replace file="${build}/src/java/my/example/Microsite.java" token="package org.cricketmsf.services;" value="package my.example;"/>
        <jar  
            destfile="${dist}/${jar-name}">
            <manifest>
                <attribute name="Main-Class" value="org.cricketmsf.Runner"/>
            </manifest>
            <fileset dir="${build}"/>
            <zipfileset src="${lib}/${json-io-lib}" includes="com/**/*"/>
            <zipfileset src="${lib}/${commons-csv-lib}" includes="org/**/*"/>
            <zipfileset src="${lib}/${h2-lib}" includes="org/**/*"/>
            <zipfileset src="${lib}/${mqtt-lib}" includes="org/**/*"/>
            <zipfileset src="${lib}/${javamail-lib}" includes="com/**/*,javax/**/*"/>
            <zipfileset src="${lib}/${activation-lib}" includes="com/**/*,javax/**/*"/>
            <zipfileset src="${lib}/${jaxb-lib}" includes="javax/**/*"/>
            <!--
            <zipfileset src="${lib}/${jetty-all-lib}" includes="org/**/*,javax/**/*"/>
            -->
        </jar>
    </target>
    
    <target name="docker-build" depends="jar" description="create new tagged image">
        <exec executable="docker">
            <arg value="build"/>
            <arg value="-t"/>
            <arg value="${docker-repository}/${artifactId}-microsite:${version}"/>
            <arg value="-t"/>
            <arg value="${docker-repository}/${artifactId}-microsite:latest"/>
            <arg value="."/>
        </exec>
    </target>
    
    <target name="docker-push" description="push current image to the repository">
        <exec executable="docker">
            <arg value="push"/>
            <arg value="${docker-repository}/${artifactId}-microsite:${version}"/>
        </exec>
        <exec executable="docker">
            <arg value="push"/>
            <arg value="${docker-repository}/${artifactId}-microsite:latest"/>
        </exec>
    </target>

    <target name="get-dependencies" depends="init" description="upload external libraries">
        <mkdir dir="lib"/> 
        <get
            src="https://search.maven.org/remotecontent?filepath=com/cedarsoftware/json-io/4.11.1/json-io-4.11.1.jar"
            dest="lib/json-io-4.11.1.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="https://github.com/gskorupa/livingdocumentation/releases/download/v0.1/LivingDocumentation.jar"
            dest="lib/LivingDocumentation.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="https://search.maven.org/remotecontent?filepath=org/apache/commons/commons-csv/1.5/commons-csv-1.5.jar"
            dest="lib/commons-csv-1.5.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="http://repo2.maven.org/maven2/com/h2database/h2/1.4.200/h2-1.4.200.jar"
            dest="lib/h2-1.4.200.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="https://repo1.maven.org/maven2/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar"
            dest="lib/jaxb-api-2.3.1.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="https://maven.java.net/content/repositories/releases/com/sun/mail/javax.mail/1.6.2/javax.mail-1.6.2.jar"
            dest="lib/javax.mail-1.6.2.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="https://search.maven.org/remotecontent?filepath=com/sun/activation/javax.activation/1.2.0/javax.activation-1.2.0.jar"
            dest="lib/javax.activation-1.2.0.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="https://search.maven.org/remotecontent?filepath=org/eclipse/paho/org.eclipse.paho.client.mqttv3/1.2.0/org.eclipse.paho.client.mqttv3-1.2.0.jar"
            dest="lib/org.eclipse.paho.client.mqttv3-1.2.0.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="http://search.maven.org/remotecontent?filepath=junit/junit/4.12/junit-4.12.jar"
            dest="lib/junit-4.12.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="http://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"
            dest="lib/hamcrest-core-1.3.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="http://central.maven.org/maven2/org/apache/httpcomponents/httpclient/4.5.5/httpclient-4.5.5.jar"
            dest="lib/httpclient-4.5.5.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="http://central.maven.org/maven2/org/apache/httpcomponents/httpcore/4.4.9/httpcore-4.4.9.jar"
            dest="lib/httpcore-4.4.9.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="http://central.maven.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.jar"
            dest="lib/commons-logging-1.2.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="https://repo1.maven.org/maven2/org/eclipse/jetty/aggregate/jetty-all/9.4.27.v20200227/jetty-all-9.4.27.v20200227-uber.jar"
            dest="lib/jetty-all.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
    </target>
    <target name="compile.tests" depends="init" description="compile test cases">
        <javac 
            target="1.8" 
            source="1.8" 
            srcdir="${tests}" 
            destdir="${build.test}"
            includeantruntime="false" 
            debug="on"
            classpathref="project-classpath">
            <classpath>
                <pathelement path="${build}"/>
                <pathelement path="${build.test}"/>
                <pathelement location="${lib}/junit-4.12.jar"/>
                <pathelement location="${lib}/httpclient-4.5.5.jar"/>
                <pathelement location="${lib}/httpcore-4.4.9.jar"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
            <!--<compilerarg value="-Xlint:unchecked"/>-->
        </javac>
    </target>
    <target name="run" depends="dist" if="${targetJava10+}">
        <input message="Service name to run:" validargs="BasicService,Microsite" addproperty="service.name" defaultvalue="BasicService"/>
        <java jar="${dist}/${jar-name}" dir="${dist}" jvm="">
            <arg value="-c"/>
            <arg value="config/cricket.json"/>
            <arg value="-s"/>
            <arg value="${service.name}"/>
            <arg value="-r"/>
        </java>
    </target>
     <target name="run-microsite" depends="dist" if="${targetJava10+}">
        <java jar="${dist}/${jar-name}" dir="${dist}" jvm="">
            <arg value="-c"/>
            <arg value="config/cricket.json"/>
            <arg value="-s"/>
            <arg value="Microsite"/>
            <arg value="-r"/>
        </java>
    </target>
    <target name="run-alternate-jvm" depends="dist">
        <input message="Service name to run:" validargs="BasicService|Microsite" addproperty="service.name" defaultvalue="BasicService"/>
        <java jar="${dist}/${jar-name}" dir="${dist}" jvm="${alternateJDK}/bin/java">
            <arg value="-c"/>
            <arg value="config/cricket.json"/>
            <arg value="-s"/>
            <arg value="${service.name}"/>
            <arg value="-r"/>
        </java>
    </target>
    <target name="test" depends="compile.tests">
        <delete dir="${reports}"/>
        <mkdir dir="${reports}/log"/>
        <junit fork="yes" printsummary="yes" showoutput="yes" dir="${reports}">
            <classpath>
                <pathelement path="${build.test}"/>
                <pathelement location="${dist}/${jar-name}"/>
                <pathelement location="${lib}/junit-4.12.jar"/>
                <pathelement location="${lib}/hamcrest-core-1.3.jar"/>
                <pathelement location="${lib}/httpclient-4.5.5.jar"/>
                <pathelement location="${lib}/httpcore-4.4.9.jar"/>
                <pathelement location="${lib}/commons-logging-1.2.jar"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
            <test name="org.cricketmsf.test.microsite.GdprStandardUserTest" haltonfailure="no" todir="${reports}"/>
            <test name="org.cricketmsf.test.microsite.CmsTests" haltonfailure="no" todir="${reports}"/>
            <test name="org.cricketmsf.test.microsite.SystemTests" haltonfailure="no" todir="${reports}"/>
        </junit>
        <junitreport todir="${reports}">
            <fileset dir="${reports}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports}/html"/>
        </junitreport>
    </target>
</project>
